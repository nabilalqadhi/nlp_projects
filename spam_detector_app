# spam_detector_app.py
import streamlit as st
import joblib
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
import string

# Download NLTK resources
nltk.download('punkt')
nltk.download('stopwords')

# Load trained model and vectorizer
model = joblib.load('spam_classifier.joblib')
vectorizer = joblib.load('tfidf_vectorizer.joblib')

# Preprocessing function (must match training preprocessing)
def preprocess_text(text):
    # Convert to lowercase
    text = text.lower()
    
    # Remove punctuation
    text = ''.join([char for char in text if char not in string.punctuation])
    
    # Tokenize and remove stopwords
    stop_words = set(stopwords.words('english'))
    tokens = nltk.word_tokenize(text)
    filtered_words = [word for word in tokens if word not in stop_words]
    
    # Stemming
    stemmer = PorterStemmer()
    stemmed_words = [stemmer.stem(word) for word in filtered_words]
    
    return ' '.join(stemmed_words)

# Streamlit UI
st.title("ðŸ“§ Spam/Ham Email Classifier")
st.markdown("""
This app uses a machine learning model to classify emails/messages as **SPAM** or **HAM** (legitimate).
""")

# Input text area
user_input = st.text_area("Enter your email/message here:", height=200)

if st.button("Analyze"):
    if user_input:
        # Preprocess and vectorize
        processed_text = preprocess_text(user_input)
        vectorized_text = vectorizer.transform([processed_text])
        
        # Make prediction
        prediction = model.predict(vectorized_text)
        probability = model.predict_proba(vectorized_text)
        
        # Display results
        st.subheader("Results:")
        
        if prediction[0] == 'spam':
            st.error(f"ðŸš¨ **SPAM** detected (confidence: {probability[0][1]*100:.2f}%)")
        else:
            st.success(f"âœ… **HAM** (legitimate) (confidence: {probability[0][0]*100:.2f}%)")
        
        # Probability visualization
        st.markdown("### Probability Breakdown")
        col1, col2 = st.columns(2)
        with col1:
            st.metric(label="Ham Probability", value=f"{probability[0][0]*100:.2f}%")
        with col2:
            st.metric(label="Spam Probability", value=f"{probability[0][1]*100:.2f}%")
        
    else:
        st.warning("Please enter a message to analyze!")

# Add some examples
st.markdown("### Try these examples:")
examples = [
    "Free entry in 2 a weekly comp to win FA Cup final tkts 21st May 2005. Text FA to 87121 to receive entry question(std txt rate)",
    "Hey, are we still meeting for lunch tomorrow?",
    "Congratulations! You've been selected for a free $1000 Amazon gift card! Click here to claim now!",
    "Your package will arrive today at 3PM. Please ensure someone is home to receive it."
]

for example in examples:
    st.code(example)
