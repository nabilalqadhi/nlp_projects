import streamlit as st
import joblib
import nltk
import string
import os

# Set NLTK data path
nltk_data_path = os.path.join(os.getcwd(), "nltk_data")
os.environ['NLTK_DATA'] = nltk_data_path

# Download NLTK resources
nltk.download('punkt', download_dir=nltk_data_path)
nltk.download('stopwords', download_dir=nltk_data_path)

from nltk.corpus import stopwords
from nltk.stem import PorterStemmer

# Load model and vectorizer
model = joblib.load('spam_classifier.joblib')
vectorizer = joblib.load('tfidf_vectorizer.joblib')

def preprocess_text(text):
    text = text.lower()
    text = ''.join([char for char in text if char not in string.punctuation])
    tokens = nltk.word_tokenize(text)
    stop_words = set(stopwords.words('english'))
    filtered = [word for word in tokens if word not in stop_words]
    stemmer = PorterStemmer()
    return ' '.join([stemmer.stem(word) for word in filtered])

# Streamlit UI
st.title("ðŸ“§ Spam Detection App")
st.write("Paste your email/message to check if it's spam or ham")

user_input = st.text_area("Input Text:", height=200)

if st.button("Check"):
    if user_input.strip():
        processed = preprocess_text(user_input)
        vectorized = vectorizer.transform([processed])
        prediction = model.predict(vectorized)[0]
        proba = model.predict_proba(vectorized)[0]
        
        st.subheader("Result:")
        if prediction == 'spam':
            st.error(f"ðŸš¨ SPAM (Confidence: {proba[1]*100:.1f}%)")
        else:
            st.success(f"âœ… HAM (Confidence: {proba[0]*100:.1f}%)")
    else:
        st.warning("Please enter some text to analyze")
